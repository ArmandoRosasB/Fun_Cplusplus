Estructura de datos caracterizada por ser una secuencia de 
elementos en la que la operaci칩n de inserci칩n se reaiza 
por un extremo y la extracci칩n por el otro.

El primero en llegar es el primero en salir.

Dos partes:
	Frente
	Final

Operaciones usuales:
	Insertar (push): Aniade un elemento al final de la cola
	Quitar(pop): Elimina un elemento del extremo opuesto



struct Nodo{
	int dato;
	Nodo* siguiente;

};

En pilas manejabamos un puntero, que apuntaba a la cima.
En colas vamos a tener dos punteros, uno que apunta al frente
y uno que apunta al final.


Insertar elementos
1. Crear espacio en memoria para almacenar un nodo
	frente -> NULL;
	fin -> NULL;
	
	void insertarCola(Nodo *&frente, Nodo *&fin, int dato){
		Nodo * nuevo_nodo = new Nodo();
	}



2. Asginar ese nuevo nodo al dato que queremos insertar
	void insertarCola(Nodo *&frente, Nodo *&fin, int dato){
		Nodo * nuevo_nodo = new Nodo();
		nuevo_nodo->dato = dato;
		nuevo_nodo->siguiente = NULL;
	}



3. Asignar los punteros frente y fin hacia el nuevo nodo
	Vacia
	frente->NULL
	fin->NULL
	
	1 o m치s nodos
	Igulamos fin a nuevo nodo



	void insertarCola(Nodo *&frente, Nodo *&fin, int dato){
		Nodo * nuevo_nodo = new Nodo();
		nuevo_nodo->dato = dato;
		nuevo_nodo->siguiente = NULL;

		if(cola_vacia(frente)){
			frente = nuevo_nodo;
		} else{
			fin->siguiente = nuevo_nodo;
		}
		fin = nuevo_nodo
}

		
	}


--Eliminar nodo de una cola--

1. Obtener el valor del nodo

void suprimirCola(Nodo *&frente, Nodo *&fin, int &dato){
	n = frente->dato;	
	
	}

2. Crear un aux y asignarle el frente de la cola

void suprimirCola(Nodo *&frente, Nodo *&fin, int &dato){
	n = frente->dato;	
	Nodo *aux = frente

	}

3. Eliminar el nodo del frente de la cola

void suprimirCola(Nodo *&frente, Nodo *&fin, int &dato){
	n = frente->dato;	
	Nodo *aux = frente

	if(frente == fin){
		frente = NULL
		fin = NULL;
	} else{
		frente = frente->siguiente;
	}	
	
	delete aux;

	}
	

